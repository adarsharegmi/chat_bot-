"""
database commands
"""

from __future__ import annotations

import typing
from pathlib import Path
from addy_core.lib.utils import resolve_module_version

from alembic import command  # type: ignore
from alembic.config import Config  # type: ignore
from sqlalchemy import create_engine  # type: ignore

from addy_core.lib.settings import AbstractSettings as Settings
from addy_core.lib.utils import resolve_module_version_locations

from addy_core.databases.alembic import constants  # type: ignore


def get_alembic_config() -> Config:
    """return alembic config object"""
    alembic_path = Path(constants.__file__).parent
    alembic_ini_file = alembic_path.joinpath("alembic.ini")
    config = Config(alembic_ini_file)
    config.set_main_option("script_location", str(alembic_path))
    return config


class AlembicCommand:
    """alembic migration commands"""

    def __init__(self, settings: Settings):
        self.alembic_cfg = get_alembic_config()
        self.alembic_cfg.set_main_option("sqlalchemy.url", settings.pg_dsn)

        self.migration_paths = resolve_module_version_locations(
            settings.components, "alembic_versions"
        )
        self.alembic_cfg.set_main_option(
            "version_locations",
            " ".join([str(path) for path in self.migration_paths]),
        )

    def current(self) -> None:
        """show current revision"""
        command.current(self.alembic_cfg)

    def heads(self, verbose: bool = False) -> None:
        """show available heads"""
        command.heads(self.alembic_cfg, verbose=verbose)

    def history(self) -> None:
        """show revision history"""
        command.history(self.alembic_cfg)

    def initrevision(
        self, message: str, branch_label: str, version_path: str, head: str = "base"
    ) -> None:
        """initialize a branch"""
        version_path = resolve_module_version(self.migration_paths, version_path)
        command.revision(
            self.alembic_cfg,
            message=message,
            autogenerate=False,
            head=head,
            branch_label=branch_label,
            version_path=version_path,
        )

    def makemigrations(
        self,
        message: str,
        branch_label: typing.Optional[str] = None,
        depends: typing.Optional[str] = None,
        auto: bool = False,
    ) -> None:
        """create migration script"""
        _head = f"{branch_label}@head"
        command.revision(
            self.alembic_cfg,
            autogenerate=auto,
            message=message,
            head=_head,
            depends_on=depends,
        )

    def migrate(self, revision: str = "head", sql=False) -> None:
        """upgrade to a revision"""
        command.upgrade(self.alembic_cfg, revision=revision, sql=sql, tag=None)

    def rollback(self, revision: str) -> None:
        """downgrade revision"""
        command.downgrade(self.alembic_cfg, revision=revision)

    def branches(self, verbose: bool = False) -> None:
        """list all branches"""
        command.branches(self.alembic_cfg, verbose=verbose)

    def show(self, rev: str) -> None:
        """show revision info"""
        command.show(self.alembic_cfg, rev=rev)


class DbEngineCommand:
    """sqlalchemy command"""

    def _init_(self, settings):
        self.engine = create_engine(settings.pg_dsn)
